{"version":3,"sources":["services/phone.js","components/Filter/Filter.js","components/PersonForm/PersonForm.js","components/Persons/Persons.js","components/Notification/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","res","data","newObject","post","put","id","delete","Filter","props","value","newFilterName","onChange","filterNameChange","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","personsToShow","setPersons","setErrorMessage","map","person","name","number","onClick","window","confirm","PhoneService","filter","p","catch","err","setTimeout","deletePerson","Notification","successMessage","errorMessage","className","App","useState","persons","setNewName","setNewNumber","setNewFilterName","showAll","setShowAll","setSuccessMessage","useEffect","console","log","InitialPhone","checkRepeatName","indexOf","toLowerCase","event","target","preventDefault","find","changedPerson","returnedPerson","newObj","length","returnedPhone","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b0167b5.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = '/persons'\n\nconst getAll = () => {\n    const req = axios.get(baseUrl);\n    return req.then(res => res.data);\n}\n\nconst create = newObject => {\n    const req = axios.post(baseUrl, newObject);\n    return req.then(res => res.data);\n}\n\nconst update = (newObject) => {\n    const req = axios.put(`${baseUrl}/${newObject.id}`, newObject);\n    return req.then(res => res.data);\n}\n\nconst remove = (id) => {\n    const req = axios.delete(`${baseUrl}/${id}`);\n    return req.then(res => res.data);\n}\n\nexport default {getAll, create, update, remove}\n","import React from 'react';\n\nconst Filter = (props) => {\n\n    return(\n        <div>\n            filter shown with <input value={props.newFilterName} onChange={props.filterNameChange}/>\n        </div>\n    )\n}\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n\n    return(\n        <form onSubmit={props.addName}>\n            <div>\n                name: <input value={props.newName} onChange={props.handleNameChange}/>\n            </div>\n            <div>\n                number: <input value={props.newNumber} onChange={props.handleNumberChange}/>\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm;\n","import React from 'react';\nimport PhoneService from '../../services/phone'\n\nconst Persons = ({personsToShow, setPersons, setErrorMessage}) => {\n    const deletePerson = (person) => {\n        const confirm = window.confirm(`Delete ${person.name}?`)\n        if (confirm) {\n            PhoneService.remove(person.id).then(res => {\n                setPersons(personsToShow.filter(p => p.id !== person.id))\n            }).catch(err => {\n                setErrorMessage(`Inform of ${person.name} has already been removed from server`);\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n            })\n        }\n\n    }\n\n    return (\n        personsToShow.map(person =>\n            <p key={person.name}>\n                {person.name}: {person.number}\n                <button onClick={() => deletePerson(person)}>delete</button>\n            </p>)\n    )\n}\n\n\nexport default Persons;\n","const Notification = ({successMessage, errorMessage}) => {\n    if (!successMessage && !errorMessage) {\n        return null\n    }\n\n    if (successMessage) {\n        return (\n            <div className=\"success\">\n                {successMessage}\n            </div>\n        )\n    }\n\n    if (errorMessage) {\n        return (\n            <div className=\"error\">\n                {errorMessage}\n            </div>\n        )\n    }\n}\n\nexport default Notification;\n","import React, {useState, useEffect} from 'react';\nimport PhoneService from \"./services/phone\"\n\nimport Filter from \"./components/Filter/Filter\";\nimport PersonForm from \"./components/PersonForm/PersonForm\";\nimport Persons from \"./components/Persons/Persons\";\nimport Notification from \"./components/Notification/Notification\";\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newFilterName, setNewFilterName] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [successMessage, setSuccessMessage] = useState(null)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n\n    const hook = () => {\n        console.log('effect');\n\n        const eventHandler = InitialPhone => {\n            console.log('promise fulfilled')\n            setPersons(InitialPhone)\n        }\n\n        PhoneService.getAll().then(eventHandler)\n    };\n    useEffect(hook, [])\n\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value);\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value);\n    }\n\n    const addName = (event) => {\n        event.preventDefault();\n        if (checkRepeatName()) {\n            const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n            if (confirm) {\n                const person = persons.find(p => p.name === newName);\n                const changedPerson = {... person, number: newNumber};\n                PhoneService.update(changedPerson).then(returnedPerson => {\n                    setPersons(personsToShow.map(p => p.id !== person.id ? p : returnedPerson))\n                    setNewName('');\n                    setNewNumber('');\n                })\n            }\n            return;\n        }\n        const newObj = {\n            name: newName,\n            number: newNumber,\n            id: persons.length + 1\n        }\n        PhoneService.create(newObj).then(returnedPhone => {\n            setSuccessMessage(`Added ${returnedPhone.name}`);\n            setTimeout(() => {\n                setSuccessMessage(null);\n            }, 5000)\n            setPersons(persons.concat(returnedPhone));\n            setNewName('');\n            setNewNumber('');\n        })\n    }\n\n    const checkRepeatName = () => {\n        const namelist = persons.map(person => person.name);\n        return namelist.indexOf(newName) > -1;\n    }\n\n    const filterNameChange = (event) => {\n        setShowAll(event.target.value === '');\n        setNewFilterName(event.target.value);\n    }\n\n    const personsToShow = showAll ? persons : persons.filter(person => person.name.toLowerCase().indexOf(newFilterName.toLowerCase()) > -1)\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            <Notification successMessage={successMessage} errorMessage={errorMessage}/>\n\n            <Filter newFilterName={newFilterName} filterNameChange={filterNameChange} />\n\n            <h2>add a new</h2>\n            <PersonForm addName={addName}\n                        newName={newName} handleNameChange={handleNameChange}\n                        newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n\n            <h2>Numbers</h2>\n            <Persons personsToShow={personsToShow} setPersons={setPersons} setErrorMessage={setErrorMessage}/>\n        </div>\n    )\n}\n\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}